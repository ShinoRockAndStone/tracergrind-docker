# === Configura√ß√µes ===
SRC = test.c
RAWNAME = $(basename $(SRC))
TRACE_DIR = $(RAWNAME)-memorytraces
ABS_TRACE_DIR = $(shell realpath $(TRACE_DIR))
ULIMIT = --ulimit nofile=262144:262144

# === Alvo principal ===
all: check-env compile trace texttrace symbols
	@echo "‚úÖ Tudo pronto! Resultados est√£o em $(TRACE_DIR)"

# === Checagem de ambiente ===
check-env:
	@command -v docker >/dev/null 2>&1 || { echo >&2 "‚ùå ERRO: Docker n√£o est√° instalado ou n√£o est√° no PATH."; exit 1; }
	@command -v gcc >/dev/null 2>&1 || { echo >&2 "‚ùå ERRO: gcc n√£o est√° instalado ou n√£o est√° no PATH."; exit 1; }
	@test -f $(SRC) || { echo >&2 "‚ùå ERRO: O arquivo '$(SRC)' n√£o foi encontrado."; exit 1; }

# === Compila√ß√£o do c√≥digo fonte ===
compile:
	@echo "üîß Compilando $(SRC)..."
	mkdir -p $(TRACE_DIR)
	cp $(SRC) $(TRACE_DIR)/
	gcc -o $(TRACE_DIR)/$(RAWNAME).out $(TRACE_DIR)/$(SRC)

# === Execu√ß√£o do Tracergrind ===
trace: compile
	@echo "üêæ Rodando tracergrind..."
	docker run --rm -it $(ULIMIT) -v $(ABS_TRACE_DIR):/home tracergrind \
		-d -d --tool=tracergrind \
		--output=/home/$(RAWNAME).trace \
		/home/$(RAWNAME).out | tee $(TRACE_DIR)/$(RAWNAME).logs

# === Convers√£o do trace para formato leg√≠vel ===
texttrace: trace
	@echo "üß† Convertendo .trace em .texttrace..."
	@if [ -f "$(TRACE_DIR)/$(RAWNAME).trace" ]; then \
		docker run --rm -it $(ULIMIT) -v $(ABS_TRACE_DIR):/home texttrace \
			/home/$(RAWNAME).trace /home/$(RAWNAME).texttrace; \
	else \
		echo "‚ùå ERRO: $(RAWNAME).trace n√£o encontrado. Execute 'make trace' primeiro."; \
		exit 1; \
	fi

# === Extra√ß√£o de s√≠mbolos ELF do bin√°rio ===
symbols: compile
	@echo "üì¶ Extraindo s√≠mbolos com readelf..."
	readelf -Wa $(TRACE_DIR)/$(RAWNAME).out | grep -e .text -e main > $(TRACE_DIR)/$(RAWNAME).elf

# === Limpeza dos arquivos gerados ===
clean:
	@echo "üßπ Limpando arquivos gerados..."
	rm -rf $(TRACE_DIR)
	@echo "‚úîÔ∏è Limpeza completa."
